Вот примеры алгоритма сортировки слиянием на JavaScript и на чистом C:
JavaScript:
function mergeSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  const mid = Math.floor(arr.length / 2);
  const left = arr.slice(0, mid);
  const right = arr.slice(mid);
  return merge(mergeSort(left), mergeSort(right));
}
function merge(left, right) {
  let result = [];
  let leftIndex = 0;
  let rightIndex = 0;
  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] < right[rightIndex]) {
      result.push(left[leftIndex]);
      leftIndex++;
    } else {
      result.push(right[rightIndex]);
      rightIndex++;
    }
  }
  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}
const arr = [5, 2, 8, 3, 1, 6];
const sortedArr = mergeSort(arr);
console.log(sortedArr);

Чистый C:
#include <stdio.h>
void merge(int arr[], int left[], int leftSize, int right[], int rightSize) {
  int i = 0, j = 0, k = 0;
  while (i < leftSize && j < rightSize) {
    if (left[i] <= right[j]) {
      arr[k] = left[i];
      i++;
    } else {
      arr[k] = right[j];
      j++;
    }
    k++;
  }
  while (i < leftSize) {
    arr[k] = left[i];
    i++;
    k++;
  }
  while (j < rightSize) {
    arr[k] = right[j];
    j++;
    k++;
  }
}
void mergeSort(int arr[], int size) {
  if (size <= 1) {
    return;
  }
  int mid = size / 2;
  int left[mid];
  int right[size - mid];
  for (int i = 0; i < mid; i++) {
    left[i] = arr[i];
  }
  for (int i = mid; i < size; i++) {
    right[i - mid] = arr[i];
  }
  mergeSort(left, mid);
  mergeSort(right, size - mid);
  merge(arr, left, mid, right, size - mid);
}
int main() {
  int arr[] = {5, 2, 8, 3, 1, 6};
  int size = sizeof(arr) / sizeof(arr[0]);
  mergeSort(arr, size);
  for (int i = 0; i < size; i++) {
    printf("%d ", arr[i]);
  }
  return 0;
}

Оба примера реализуют алгоритм сортировки слиянием, который разделяет массив пополам до тех пор, пока не останется один элемент. Затем происходит слияние отсортированных подмассивов в один отсортированный массив. В JavaScript примере используется рекурсия для разделения и слияния, а в C примере - обычные циклы и рекурсия.