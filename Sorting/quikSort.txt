Вот примеры алгоритма быстрой сортировки на JavaScript и на чистом C:
JavaScript:
function quickSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  const pivot = arr[arr.length - 1];
  const left = [];
  const right = [];
  for (let i = 0; i < arr.length - 1; i++) {
    if (arr[i] < pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }
  return [...quickSort(left), pivot, ...quickSort(right)];
}
const arr = [5, 2, 8, 3, 1, 6];
const sortedArr = quickSort(arr);
console.log(sortedArr);

Чистый C:
#include <stdio.h>
void swap(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}
int partition(int arr[], int low, int high) {
  int pivot = arr[high];
  int i = (low - 1);
  for (int j = low; j <= high - 1; j++) {
    if (arr[j] < pivot) {
      i++;
      swap(&arr[i], &arr[j]);
    }
  }
  swap(&arr[i + 1], &arr[high]);
  return (i + 1);
}
void quickSort(int arr[], int low, int high) {
  if (low < high) {
    int pi = partition(arr, low, high);
    quickSort(arr, low, pi - 1);
    quickSort(arr, pi + 1, high);
  }
}
int main() {
  int arr[] = {5, 2, 8, 3, 1, 6};
  int size = sizeof(arr) / sizeof(arr[0]);
  quickSort(arr, 0, size - 1);
  for (int i = 0; i < size; i++) {
    printf("%d ", arr[i]);
  }
  return 0;
}

Оба примера реализуют алгоритм быстрой сортировки (Quicksort), который разделяет массив на две части относительно опорного элемента, и затем рекурсивно сортирует каждую часть. В JavaScript примере используется рекурсия и методы массивов, а в C примере используются циклы и рекурсия для разделения и сортировки массива.