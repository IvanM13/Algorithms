Алгоритм Прима используется для нахождения минимального остовного дерева в графе. Вот реализация на JavaScript:

function prim(graph, vertices, start) {
var minEdge = {}; // Словарь для хранения минимальных ребер
var parents = {}; // Словарь, хранящий предков для каждого вершины

for (var i = 0; i < vertices.length; i++) {
minEdge[i] = {weight: Number.POSITIVE_INFINITY, index: -1};
parents[i] = -1;
}

minEdge[start] = {weight: 0, index: start};

while (true) {
var minimum = null;
var smallestWeight = Number.POSITIVE_INFINITE;

for (var v = 0; v < vertices.length; v++) {
  if (minEdge[v].weight < smallestWeight) {
    smallestWeight = minEdge[v].weight;
    minimum = v;
  }
}

if (minimum == null) {
  break;

}

for (let u = 0; u < vertices.length; u++) {
  var candidate = {
    v: minimum,
    w: graph[minimum][u],
  };
  
  if (candidate.w < minEdge[u].weight) {
    minEdge[u] = candidate;
  }
}

}

return minEdge;
}
Примечание: эта функция предполагает, что граф представлен в виде двумерного массива смежности, где каждый элемент представляет собой вес ребра между вершинами.

Этот алгоритм может быть использован для нахождения кратчайшего пути между двумя вершинами в графе, если вы храните только те ребра, которые были использованы для нахождения минимального веса.

Вы можете создать тестовый граф и проверить результаты работы алгоритма на нём. Например, вот тестовый граф с шестью вершинами:

var graph = [
  [0, 7, 9, 0, 0, 0],
  [7, 0, 11, 0, 0, 0],
  [9, 11, 0, 2, 0, 0],
  [0, 0, 2, 0, 6, 0],
  [0, 0, 0, 6, 0, 8],
  [0, 0, 0, 0, 8, 0]
];

Здесь каждый элемент в массиве - это вес ребра между двумя вершинами. Нулевые значения означают отсутствие ребра.

Теперь вы можете вызвать функцию prim с этим графом и одной из вершин в качестве стартовой:

prim(graph, graph.length, 0);

Это даст вам словарь minEdge, который содержит информацию о минимальном ребре между каждой парой вершин.
