Алгоритм связности, известный также как алгоритм обхода в ширину (BFS - Breadth-First Search) или алгоритм поиска компонент связности, используется для определения связности в неориентированном графе или графе без циклов. Приведу примеры реализации алгоритма связности на JavaScript и на чистом языке Си.

### Алгоритм связности на JavaScript:

```javascript
// Функция для определения связных компонент графа
function findConnectedComponents(graph) {
    const visited = new Set();
    const connectedComponents = [];

    for (let vertex in graph) {
        if (!visited.has(vertex)) {
            const component = [];
            bfs(vertex, component);
            connectedComponents.push(component);
        }
    }

    function bfs(start, component) {
        const queue = [start];
        visited.add(start);

        while (queue.length) {
            const current = queue.shift();
            component.push(current);

            for (let neighbor of graph[current]) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                    visited.add(neighbor);
                }
            }
        }
    }

    return connectedComponents;
}
```

### Алгоритм связности на чистом Си:

```c
#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

// Функция для определения связных компонент графа
void findConnectedComponents(int** graph, int* visited, int start, int n, int* component, int* componentSize) {
    visited[start] = 1;
    component[(*componentSize)++] = start;

    for (int i = 0; i < n; i++) {
        if (graph[start][i] && !visited[i]) {
            findConnectedComponents(graph, visited, i, n, component, componentSize);
        }
    }
}

int main() {
    int n; // Количество вершин в графе
    int** graph = (int**)malloc(MAX_NODES * sizeof(int*));
    int* visited = (int*)calloc(MAX_NODES, sizeof(int));

    printf("Введите количество вершин в графе: ");
    scanf("%d", &n);

    printf("Введите матрицу смежности графа:\n");
    for (int i = 0; i < n; i++) {
        graph[i] = (int*)malloc(n * sizeof(int));
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int* connectedComponents[MAX_NODES];
    int componentCount = 0;

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            connectedComponents[componentCount] = (int*)malloc(n * sizeof(int));
            int componentSize = 0;
            findConnectedComponents(graph, visited, i, n, connectedComponents[componentCount], &componentSize);
            componentCount++;
        }
    }

    printf("Связные компоненты графа:\n");
    for (int i = 0; i < componentCount; i++) {
        printf("Компонента %d: ", i + 1);
        for (int j = 0; j < n; j++) {
            if (connectedComponents[i][j] != 0) {
                printf("%d ", connectedComponents[i][j]);
            }
        }
        printf("\n");
    }

    return 0;
}
```

Оба этих примера реализуют алгоритм связности для определения связных компонент графа. Результатом является список связных компонент графа, где каждая компонента является массивом вершин, принадлежащих к этой компоненте. Пожалуйста, обратите внимание, что приведенный здесь код представляет простой пример и ожидает, что используемый граф задается матрицей смежности.