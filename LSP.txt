function computeLPS(pattern) {
  const lps = [0];
  let len = 0;
  let i = 1;
  
  while (i < pattern.length) {
    if (pattern[i] === pattern[len]) {
      len++;
      lps[i] = len;
      i++;
    } else {
      if (len !== 0) {
        len = lps[len - 1];
      } else {
        lps[i] = 0;
        i++;
      }
    }
  }
  
  return lps;
}
function KMP(text, pattern) {
  const lps = computeLPS(pattern);
  const indices = [];
  let i = 0;
  let j = 0;
  
  while (i < text.length) {
    if (text[i] === pattern[j]) {
      i++;
      j++;
    }
    
    if (j === pattern.length) {
      indices.push(i - j);
      j = lps[j - 1];
    } else if (i < text.length && text[i] !== pattern[j]) {
      if (j !== 0) {
        j = lps[j - 1];
      } else {
        i++;
      }
    }
  }
  
  return indices;
}
const text = "ABABDABACDABABCABAB";
const pattern = "ABABCABAB";
const indices = KMP(text, pattern);
console.log(indices); // Output: [10]

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void computeLPS(char* pattern, int* lps) {
  int len = 0;
  int i = 1;
  lps[0] = 0;
  
  while (i < strlen(pattern)) {
    if (pattern[i] == pattern[len]) {
      len++;
      lps[i] = len;
      i++;
    } else {
      if (len != 0) {
        len = lps[len - 1];
      } else {
        lps[i] = 0;
        i++;
      }
    }
  }
}
void KMP(char* text, char* pattern, int* indices) {
  int* lps = (int*)malloc(strlen(pattern) * sizeof(int));
  computeLPS(pattern, lps);
  
  int i = 0;
  int j = 0;
  int indexCount = 0;
  
  while (i < strlen(text)) {
    if (text[i] == pattern[j]) {
      i++;
      j++;
    }
    
    if (j == strlen(pattern)) {
      indices[indexCount] = i - j;
      j = lps[j - 1];
      indexCount++;
    } else if (i < strlen(text) && text[i] != pattern[j]) {
      if (j != 0) {
        j = lps[j - 1];
      } else {
        i++;
      }
    }
  }
  
  free(lps);
}
int main() {
  char text[] = "ABABDABACDABABCABAB";
  char pattern[] = "ABABCABAB";
  int indices[100];
  
  KMP(text, pattern, indices);
  
  for (int i = 0; i < sizeof(indices) / sizeof(indices[0]); i++) {
    if (indices[i] != 0) {
      printf("%d ", indices[i]);
    }
  }
  
  return 0;
}

Алгоритм Кнута-Морриса-Пратта (алгоритм KMP) - это алгоритм поиска подстроки в строке с использованием префиксных функций. Приведу примеры реализации алгоритма KMP на JavaScript и на чистом Си.

### Алгоритм Кнута-Морриса-Пратта на JavaScript:

```javascript
// Функция для поиска подстроки в строке с использованием алгоритма Кнута-Морриса-Пратта
function kmpSearch(pattern, text) {
    const m = pattern.length;
    const n = text.length;

    // Создание префиксной функции
    const prefix = computePrefix(pattern);

    // Поиск подстроки
    let i = 0;
    let j = 0;
    const indices = [];
    while (i < n) {
        if (pattern[j] === text[i]) {
            i++;
            j++;
        }

        if (j === m) {
            indices.push(i - j);
            j = prefix[j - 1];
        } else if (i < n && pattern[j] !== text[i]) {
            if (j !== 0) {
                j = prefix[j - 1];
            } else {
                i++;
            }
        }
    }

    return indices;
}

// Функция для вычисления префиксной функции
function computePrefix(pattern) {
    const m = pattern.length;
    const prefix = [0];
    let len = 0;
    let i = 1;

    while (i < m) {
        if (pattern[i] === pattern[len]) {
            len++;
            prefix[i] = len;
            i++;
        } else {
            if (len !== 0) {
                len = prefix[len - 1];
            } else {
                prefix[i] = 0;
                i++;
            }
        }
    }

    return prefix;
}
```

### Алгоритм Кнута-Морриса-Пратта на чистом Си:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Функция для поиска подстроки в строке с использованием алгоритма Кнута-Морриса-Пратта
int* kmpSearch(const char* pattern, const char* text) {
    int m = strlen(pattern);
    int n = strlen(text);

    // Создание префиксной функции
    int* prefix = computePrefix(pattern);

    // Поиск подстроки
    int i = 0;
    int j = 0;
    int* indices = (int*)malloc(n * sizeof(int)); // Максимальное количество индексов - n
    int count = 0;
    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            indices[count++] = i - j;
            j = prefix[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = prefix[j - 1];
            } else {
                i++;
            }
        }
    }

    indices = (int*)realloc(indices, count * sizeof(int)); // Изменение размера массива до реального количества индексов

    return indices;
}

// Функция для вычисления префиксной функции
int* computePrefix(const char* pattern) {
    int m = strlen(pattern);
    int* prefix = (int*)malloc(m * sizeof(int));
    prefix[0] = 0;
    int len = 0;
    int i = 1;

    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            prefix[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = prefix[len - 1];
            } else {
                prefix[i++] = 0;
            }
        }
    }

    return prefix;
}
```

Оба этих примера реализуют алгоритм Кнута-Морриса-Пратта для поиска подстроки в строке. Результатом является массив индексов начала всех найденных подстрок в исходной строке. Обратите внимание, что в примерах используются динамическое выделение памяти для массива результатов.
